# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Mon May  5 14:44:04 2014

import wx
from RSMPeak import RSMPeak
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade


class PeakFitDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # matplotlib figure
        self.figure = Figure()
        # begin wxGlade: PeakFitDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.lbName = wx.StaticText(self, -1, "Peak name")
        self.tcPeakName = wx.TextCtrl(self, -1, "", style=wx.TE_CENTRE)
        self.lbPosition = wx.StaticText(self, -1, "Position")
        self.tcPositionX = wx.TextCtrl(self, -1, "", style=wx.TE_CENTRE)
        self.tcPositionY = wx.TextCtrl(self, -1, "", style=wx.TE_CENTRE)
        self.lbWidth = wx.StaticText(self, -1, "Widths")
        self.tcSigmaX = wx.TextCtrl(self, -1, "0.001", style=wx.TE_CENTRE)
        self.tcSigmaY = wx.TextCtrl(self, -1, "0.001", style=wx.TE_CENTRE)
        self.lbAngle = wx.StaticText(self, -1, "Angle", style=wx.ALIGN_RIGHT)
        self.tcAngle = wx.TextCtrl(self, -1, "0.000", style=wx.TE_CENTRE)
        self.lbScale = wx.StaticText(self, -1, "Scale")
        self.tcScale = wx.TextCtrl(self, -1, "1.000", style=wx.TE_CENTRE)
        self.lbBackground = wx.StaticText(self, -1, "Background", style=wx.ALIGN_RIGHT)
        self.tcBackground = wx.TextCtrl(self, -1, "0.000", style=wx.TE_CENTRE)
        self.static_line_1 = wx.StaticLine(self, -1)
        self.label_1 = wx.StaticText(self, -1, "Fit data range", style=wx.ALIGN_RIGHT)
        self.lbXRange = wx.StaticText(self, -1, "X range")
        self.tcXRange = wx.TextCtrl(self, -1, "0.1", style=wx.TE_PROCESS_ENTER | wx.TE_PROCESS_TAB | wx.TE_CENTRE)
        self.lbYRange = wx.StaticText(self, -1, "Y Range")
        self.tcYRange = wx.TextCtrl(self, -1, "0.1", style=wx.TE_PROCESS_ENTER | wx.TE_PROCESS_TAB | wx.TE_CENTRE)
        self.static_line_3 = wx.StaticLine(self, -1)
        self.bCancel = wx.Button(self, wx.ID_CANCEL, "Cancel")
        self.bApply = wx.Button(self, wx.ID_APPLY, "Apply")
        self.bOK = wx.Button(self, wx.ID_OK, "OK")
        self.static_line_2 = wx.StaticLine(self, -1, style=wx.LI_VERTICAL)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.onXRange, self.tcXRange)
        self.Bind(wx.EVT_TEXT_ENTER, self.onYRange, self.tcYRange)
        self.Bind(wx.EVT_BUTTON, self.onApply, id=wx.ID_APPLY)
        self.Bind(wx.EVT_BUTTON, self.onOK, id=wx.ID_OK)
        # end wxGlade
        
        #add axes to display qx and qz scans to the figure
        self.axes_qx = self.figure.add_subplot(211)
        self.axes_qz = self.figure.add_subplot(212)

    def __set_properties(self):
        # begin wxGlade: PeakFitDialog.__set_properties
        self.SetTitle("Fit peak")
        self.SetSize((872, 364))
        self.tcPeakName.SetMinSize((150, 29))
        self.lbPosition.SetMinSize((70, 19))
        self.lbWidth.SetMinSize((70, 19))
        self.lbAngle.SetMinSize((100, 19))
        self.tcAngle.SetToolTipString("Rotation angle in degrees")
        self.lbScale.SetMinSize((70, 19))
        self.lbBackground.SetMinSize((100, 19))
        self.canvas.SetMinSize((330, 330))
        self.canvas.SetBackgroundColour(wx.Colour(219, 219, 112))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PeakFitDialog.__do_layout
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.BoxSizer(wx.VERTICAL)
        sizer_28.Add(self.lbName, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_28.Add(self.tcPeakName, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13.Add(sizer_28, 0, wx.ALL | wx.EXPAND, 10)
        sizer_25.Add(self.lbPosition, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_25.Add(self.tcPositionX, 0, 0, 0)
        sizer_25.Add(self.tcPositionY, 0, 0, 0)
        sizer_24.Add(sizer_25, 1, wx.EXPAND, 0)
        sizer_26.Add(self.lbWidth, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_26.Add(self.tcSigmaX, 0, 0, 0)
        sizer_26.Add(self.tcSigmaY, 0, 0, 0)
        sizer_24.Add(sizer_26, 1, wx.EXPAND, 0)
        sizer_22.Add(sizer_24, 1, wx.ALL, 5)
        sizer_27.Add(self.lbAngle, 0, wx.RIGHT | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_27.Add(self.tcAngle, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_22.Add(sizer_27, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_13.Add(sizer_22, 0, wx.TOP | wx.EXPAND, 10)
        sizer_29.Add(self.lbScale, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_29.Add(self.tcScale, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_23.Add(sizer_29, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_30.Add(self.lbBackground, 0, wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_30.Add(self.tcBackground, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_23.Add(sizer_30, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_13.Add(sizer_23, 0, wx.TOP | wx.EXPAND, 10)
        sizer_15.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizer_15.Add(self.label_1, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_16.Add(self.lbXRange, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16.Add(self.tcXRange, 0, wx.ALL, 5)
        sizer_16.Add(self.lbYRange, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16.Add(self.tcYRange, 0, wx.ALL, 5)
        sizer_15.Add(sizer_16, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_15.Add(self.static_line_3, 0, wx.EXPAND, 0)
        sizer_13.Add(sizer_15, 0, wx.TOP | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 30)
        sizer_11.Add(sizer_13, 1, 0, 0)
        sizer_12.Add((120, 25), 0, wx.ALIGN_RIGHT | wx.ALIGN_BOTTOM, 0)
        sizer_12.Add(self.bCancel, 0, wx.ALIGN_BOTTOM, 0)
        sizer_12.Add(self.bApply, 0, wx.ALIGN_RIGHT | wx.ALIGN_BOTTOM, 0)
        sizer_12.Add(self.bOK, 0, wx.ALIGN_RIGHT | wx.ALIGN_BOTTOM, 0)
        sizer_11.Add(sizer_12, 0, wx.ALIGN_BOTTOM, 0)
        sizer_10.Add(sizer_11, 0, wx.EXPAND, 0)
        sizer_10.Add(self.static_line_2, 0, wx.EXPAND, 0)
        sizer_17.Add(self.canvas, 1, wx.ALL | wx.EXPAND, 10)
        sizer_10.Add(sizer_17, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_10)
        self.Layout()
        # end wxGlade
        
    def SetPeak(self, name, pos_x, pos_y):
        self.peak = RSMPeak(name, pos_x, pos_y, sigma_x = 0.001, sigma_y = 0.001, angle = 0.000, scale = 1.000, background = 0.000)
        self.UpdateControls()
        
    def UpdatePeak(self):
        """initializes the peak with data taken from the dialog"""
        #peak name
        self.peak.name = self.tcPeakName.GetValue()
        #peak position
        self.peak.pos_x = float(self.tcPositionX.GetValue())
        self.peak.pos_y = float(self.tcPositionY.GetValue())
        #peak width
        self.peak.sigma_x = float(self.tcSigmaX.GetValue())
        self.peak.sigma_y = float(self.tcSigmaY.GetValue())
        #peak rotation angle
        self.peak.angle = float(self.tcAngle.GetValue())
        #RSM scale and background values
        self.peak.scale = float(self.tcScale.GetValue())
        self.peak.background = float(self.tcBackground.GetValue())
     
    def GetPeak(self):
        """returns peak instance"""
        return self.peak
        
    def SetData(self, x, y, z):
        """initializes experimental data arrays and ranges"""
        self.x = x
        self.y = y
        self.z = z
        
        self.UpdateXRange()
        self.UpdateYRange()
        
    def UpdateControls(self):
        """display values in text controls of the dialog"""
        #peak name
        self.tcPeakName.SetValue(self.peak.name)
        #peak position
        self.tcPositionX.SetValue("%.4f" % self.peak.pos_x)
        self.tcPositionY.SetValue("%.4f" % self.peak.pos_y)
        #peak width
        self.tcSigmaX.SetValue("%.5f" % self.peak.sigma_x)
        self.tcSigmaY.SetValue("%.5f" % self.peak.sigma_y)
        #peak rotation angle
        self.tcAngle.SetValue("%.4f" % self.peak.angle)
        #RSM scale and background values
        self.tcScale.SetValue("%.4f" % self.peak.scale)
        self.tcBackground.SetValue("%.4f" % self.peak.background)

    def onApply(self, event):  # wxGlade: PeakFitDialog.<event_handler>
        #0) set peak initial parameters
        self.UpdatePeak()
        #1) fit with given parameters
        self.peak.Fit(self.x,self.y, self.z, [self.xrange, self.yrange])
        #2) display new parameters in the dialog
        self.UpdateControls()
        #3) display scans in the dialog
        self.UpdateScans()
        self.canvas.draw()
        
    def onOK(self, event):  # wxGlade: PeakFitDialog.<event_handler>
        #0) set peak initial parameters
        self.UpdatePeak()
        event.Skip()
    
    def UpdateScans(self):
        pass

    def onXRange(self, event):  # wxGlade: PeakFitDialog.<event_handler>
        self.UpdateXRange()
        self.canvas.draw()

    def onYRange(self, event):  # wxGlade: PeakFitDialog.<event_handler>
        self.UpdateYRange()
        self.canvas.draw()
        
    def UpdateXRange(self):
        self.xrange = float(self.tcXRange.GetValue())
        xmin = self.peak.pos_x - self.xrange / 2
        xmax = self.peak.pos_x + self.xrange / 2
        self.axes_qx.set_xlim(xmin, xmax)
        
    def UpdateYRange(self):
        self.yrange = float(self.tcYRange.GetValue())
        xmin = self.peak.pos_y - self.yrange / 2
        xmax = self.peak.pos_y + self.yrange / 2
        self.axes_qz.set_xlim(xmin, xmax)
    

# end of class PeakFitDialog
