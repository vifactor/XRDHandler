# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Sun Apr 13 19:15:26 2014

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade


class StgPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: StgPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.stMode = wx.StaticText(self, -1, "Data mode")
        self.cbMode = wx.ComboBox(self, -1, choices=["Angles", "Reciprocal points (Q)", "Reciprocal points (q)"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.stCenterOn = wx.StaticText(self, -1, "Center on")
        self.tcX0 = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)
        self.tcY0 = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)
        self.stRange = wx.StaticText(self, -1, "Ranges")
        self.stXRange = wx.StaticText(self, -1, "X range")
        self.tcXMin = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)
        self.tcXMax = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)
        self.stYRange = wx.StaticText(self, -1, "Y range")
        self.tcYMin = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)
        self.tcYMax = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)
        self.bFit = wx.Button(self, -1, "Fit")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.OnViewModeSelect, self.cbMode)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnX0Change, self.tcX0)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnY0Change, self.tcY0)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnXMinChange, self.tcXMin)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnXMaxChange, self.tcXMax)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnYMinChange, self.tcYMin)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnYMaxChange, self.tcYMax)
        self.Bind(wx.EVT_BUTTON, self.onFit, self.bFit)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: StgPanel.__set_properties
        self.cbMode.Enable(False)
        self.cbMode.SetSelection(0)
        self.tcX0.Enable(False)
        self.tcY0.Enable(False)
        self.tcXMin.Enable(False)
        self.tcXMax.Enable(False)
        self.tcYMin.Enable(False)
        self.tcYMax.Enable(False)
        self.bFit.Hide()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: StgPanel.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_9.Add(self.stMode, 0, wx.LEFT | wx.EXPAND, 0)
        sizer_9.Add(self.cbMode, 0, 0, 5)
        sizer_3.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_4.Add(self.stCenterOn, 0, wx.LEFT | wx.EXPAND, 0)
        sizer_6.Add(self.tcX0, 0, 0, 0)
        sizer_6.Add(self.tcY0, 0, 0, 0)
        sizer_4.Add(sizer_6, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_5.Add(self.stRange, 0, wx.LEFT | wx.EXPAND, 0)
        sizer_7.Add(self.stXRange, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_7.Add(self.tcXMin, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_7.Add(self.tcXMax, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(sizer_7, 0, wx.EXPAND, 0)
        sizer_8.Add(self.stYRange, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_8.Add(self.tcYMin, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_8.Add(self.tcYMax, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_5, 0, wx.EXPAND, 0)
        sizer_10.Add(self.bFit, 0, 0, 0)
        sizer_3.Add(sizer_10, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        # end wxGlade

    def OnViewModeSelect(self, event):  # wxGlade: StgPanel.<event_handler>
        frame = self.GetParent()
        mode = self.cbMode.GetCurrentSelection()
            
        self.updateFigure(mode)
        self.updateControls(mode)

    def OnX0Change(self, event):  # wxGlade: StgPanel.<event_handler>
        frame = self.GetParent()

        mode = self.cbMode.GetCurrentSelection()
        
        #TODO Validation!!!
        if mode == 0:
            frame.mplPanel.updateAngularOrigin(float(self.tcX0.GetValue()), float(self.tcY0.GetValue()))
        else:
            frame.mplPanel.updateReciprocalOrigin(float(self.tcX0.GetValue()), float(self.tcY0.GetValue()))
        #very ineffective but working solution to update central point
        self.updateFigure(mode)
        
        
    def OnY0Change(self, event):  # wxGlade: StgPanel.<event_handler>
        frame = self.GetParent()
        
        mode = self.cbMode.GetCurrentSelection()
        
        #TODO Validation!!!
        if mode == 0:
            frame.mplPanel.updateAngularOrigin(float(self.tcX0.GetValue()), float(self.tcY0.GetValue()))
        else:
            frame.mplPanel.updateReciprocalOrigin(float(self.tcX0.GetValue()), float(self.tcY0.GetValue()))
        #very ineffective but working solution to update central point
        self.updateFigure(mode)
        
    def OnXMinChange(self, event):  # wxGlade: StgPanel.<event_handler>
        frame = self.GetParent()
        
        frame.mplPanel.update_qxMinLimit(float(self.tcXMin.GetValue()))

    def OnXMaxChange(self, event):  # wxGlade: StgPanel.<event_handler>
        frame = self.GetParent()
        
        frame.mplPanel.update_qxMaxLimit(float(self.tcXMax.GetValue()))

    def OnYMinChange(self, event):  # wxGlade: StgPanel.<event_handler>
        frame = self.GetParent()
        
        frame.mplPanel.update_qzMinLimit(float(self.tcYMin.GetValue()))

    def OnYMaxChange(self, event):  # wxGlade: StgPanel.<event_handler>
        frame = self.GetParent()
        
        frame.mplPanel.update_qzMaxLimit(float(self.tcYMax.GetValue()))
    
    def updateFigure(self, mode):
        frame = self.GetParent()
        
        if mode == 0:
            frame.mplPanel.drawAngularMap()
        elif mode == 1:
            frame.mplPanel.drawReciprocalMap_Q()
        else: #mode == 2
            frame.mplPanel.drawReciprocalMap_q()
    
    def updateControls(self, mode):
        frame = self.GetParent()
        
        self.cbMode.Enable(True)
        if mode == 0:
            self.tcX0.SetValue("%s" % frame.mplPanel.omega0)
            self.tcY0.SetValue("%s" % frame.mplPanel.ttheta0)
            
            self.tcX0.Enable(True)
            self.tcY0.Enable(True)

            self.tcXMin.SetValue("-")
            self.tcXMax.SetValue("-")
            
            self.tcYMin.SetValue("-")
            self.tcYMax.SetValue("-")

            self.tcXMin.Enable(False)
            self.tcXMax.Enable(False)
            
            self.tcYMin.Enable(False)
            self.tcYMax.Enable(False)
            
            self.bFit.Hide()
            frame.mplPanel.unset_cursor()
        elif mode == 1:
            self.tcX0.SetValue("%s" % frame.mplPanel.Q0x)
            self.tcY0.SetValue("%s" % frame.mplPanel.Q0z)
        
            self.tcX0.Enable(True)
            self.tcY0.Enable(True)
            
            self.tcXMin.SetValue("-")
            self.tcXMax.SetValue("-")
            
            self.tcYMin.SetValue("-")
            self.tcYMax.SetValue("-")
            
            self.tcXMin.Enable(False)
            self.tcXMax.Enable(False)
            
            self.tcYMin.Enable(False)
            self.tcYMax.Enable(False)
            
            self.bFit.Show()
        else: #mode == 2:
            #print central point in the corresponding TextControls
            self.tcX0.SetValue("%s" % frame.mplPanel.Q0x)
            self.tcY0.SetValue("%s" % frame.mplPanel.Q0z)
        
            self.tcX0.Enable(False)
            self.tcY0.Enable(False)
            
            qxmin, qxmax, qzmin, qzmax = frame.mplPanel.getLimits()
            self.tcXMin.SetValue("%s" % qxmin)
            self.tcXMax.SetValue("%s" % qxmax)
            
            self.tcYMin.SetValue("%s" % qzmin)
            self.tcYMax.SetValue("%s" % qzmax)
            
            self.tcXMin.Enable(True)
            self.tcXMax.Enable(True)
            
            self.tcYMin.Enable(True)
            self.tcYMax.Enable(True)
            
            self.bFit.Hide()
            frame.mplPanel.unset_cursor()

    def onFit(self, event):  # wxGlade: StgPanel.<event_handler>
        frame = self.GetParent()
        frame.mplPanel.set_cursor()

# end of class StgPanel
