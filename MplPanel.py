# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Sun Apr 13 19:15:26 2014

import wx

from matplotlib import cm
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from matplotlib.widgets import Cursor

import xrayutilities as xu

from PeakFitDialog import PeakFitDialog

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade


class MplPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # matplotlib figure
        self.figure = Figure()
        
        # begin wxGlade: MplPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.toolbar = NavigationToolbar2Wx(self.canvas)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        #needed to support Windows systems
        self.toolbar.Realize()
        # show toolbar
        self.toolbar.Show()
        
        #origing in angles
        self.omega0 = None
        self.ttheta0 = None
        #origin in reciprocal units
        self.Q0x = None
        self.Q0z = None
        
        #map ranges
        self.qxmin = None
        self.qxmax = None
        self.qzmin = None
        self.qzmax = None
        
        #map data
        self.omega = None
        self.ttheta = None
        self.intensity = None
        
        #data cursor
        self.cursor = None
        
        #hxrd transformator
        Si = xu.materials.Si
        self.hxrd = xu.HXRD(Si.Q(1,1,0),Si.Q(0,0,1))

    def __set_properties(self):
        # begin wxGlade: MplPanel.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MplPanel.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.canvas, 1, wx.ALL | wx.EXPAND, 0)
        sizer_2.Add(self.toolbar, 0, wx.BOTTOM | wx.EXPAND, 5)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        # end wxGlade
        
    def setup(self, om, tt, its):
        #angular data arrays
        self.omega = om
        self.ttheta = tt
        self.intensity = its
        
        #angular central point:in the center of the map
        self.omega0 = (min(self.omega) + max(self.omega)) / 2
        self.ttheta0 = (min(self.ttheta) + max(self.ttheta)) / 2
        
        #recipocal units central point
        self.updateAngularOrigin(self.omega0, self.ttheta0)
        
    def drawAngularMap(self):
        gridder = xu.Gridder2D(150,150)
        gridder(self.omega, self.ttheta, self.intensity)
        INT = xu.maplog(gridder.data.transpose(),6,0)

        #clear axes from previous drawing
        self.figure.clf()
        #add subplot to the figure
        self.axes = self.figure.add_subplot(111)
        #draw rsm
        cf = self.axes.contourf(gridder.xaxis, gridder.yaxis,INT,100,extend='min')
        #draw center
        self.axes.scatter(self.omega0, self.ttheta0, s = 100, marker = 'x', c = 'w')
        #annotate axes
        self.axes.set_xlabel(r'$\omega$ (deg)')
        self.axes.set_ylabel(r'$2\theta$ (deg)')
        # draw colorbar
        self.figure.colorbar(cf, ax = self.axes)
        #draw figure
        self.figure.canvas.draw()

    def drawReciprocalMap_Q(self):
        [qx,qy,qz] = self.hxrd.Ang2Q(self.omega,self.ttheta,delta=[0.0, 0.0])
        
        gridder = xu.Gridder2D(100,100)
        gridder(qy,qz, self.intensity)
        INT = xu.maplog(gridder.data.transpose(),6,0)
        
        #clear axes from previous drawing
        self.figure.clf()
        #add subplot to the figure
        self.axes = self.figure.add_subplot(111)
        #draw rsm
        cf = self.axes.contourf(gridder.xaxis, gridder.yaxis,INT,100,extend='min')
        #draw center
        self.axes.scatter(self.Q0x, self.Q0z, s = 100, marker = 'x', c = 'w')
        
        #annotate axis
        self.axes.set_xlabel(r'$Q_{[110]}$ ($\AA^{-1}$)')
        self.axes.set_ylabel(r'$Q_{[001]}$ ($\AA^{-1}$)')
        # draw colorbar
        self.figure.colorbar(cf, ax = self.axes)
        #draw figure
        self.figure.canvas.draw()
        
    def drawReciprocalMap_q(self):
        qx, qz = self.get_q()
        
        gridder = xu.Gridder2D(100,100)
        gridder(qx, qz, self.intensity)
        INT = xu.maplog(gridder.data.transpose(),6,0)
        
        #clear axes from previous drawing
        self.figure.clf()
        #add subplot to the figure
        self.axes = self.figure.add_subplot(111)
        #draw rsm
        cf = self.axes.contourf(gridder.xaxis, gridder.yaxis,INT,100,extend='min')
        #draw center, in this mode center is always at zero point
        self.axes.scatter(0, 0, s = 100, marker = 'x', c = 'w')
        
        #annotate axis
        self.axes.set_xlabel(r'$q_{[110]}$ ($\AA^{-1}$)')
        self.axes.set_ylabel(r'$q_{[001]}$ ($\AA^{-1}$)')
        
        # draw colorbar
        self.figure.colorbar(cf, ax = self.axes)
        #draw figure
        self.figure.canvas.draw()
        
    def updateAngularOrigin(self, om0, tt0):
        self.omega0 = om0
        self.ttheta0 = tt0
        
        [dummy, self.Q0x, self.Q0z] = self.hxrd.Ang2Q(self.omega0,self.ttheta0,delta=[0.0, 0.0])
    
    def updateReciprocalOrigin(self, Q0x, Q0z):
        self.Q0x = Q0x
        self.Q0z = Q0z
        
        #low incidence high exit angles for panalytical
        [self.omega0, chi, phi, self.ttheta0] = self.hxrd.Q2Ang((0.0, self.Q0x, self.Q0z), geometry = 'lo_hi')
        
    def update_qxMinLimit(self, qlim):
        #get previous axes limits
        qmin, qmax = self.figure.gca().get_xlim()
        #set new axes limits
        self.figure.gca().set_xlim(qlim, qmax)
        #redraw figure
        self.canvas.draw()
        
    def update_qxMaxLimit(self, qlim):
        #get previous axes limits
        qmin, qmax = self.figure.gca().get_xlim()
        #set new axes limits
        self.figure.gca().set_xlim(qmin, qlim)
        #redraw figure
        self.canvas.draw()
        
    def update_qzMinLimit(self, qlim):
        #get previous axes limits
        qmin, qmax = self.figure.gca().get_ylim()
        #set new axes limits
        self.figure.gca().set_ylim(qlim, qmax)
        #redraw figure
        self.canvas.draw()
        
    def update_qzMaxLimit(self, qlim):
        #get previous axes limits
        qmin, qmax = self.figure.gca().get_ylim()
        #set new axes limits
        self.figure.gca().set_ylim(qmin, qlim)
        #redraw figure
        self.canvas.draw()
        
    def getLimits(self):
        qxmin, qxmax = self.figure.gca().get_xlim()
        qzmin, qzmax = self.figure.gca().get_ylim()
        return qxmin, qxmax, qzmin, qzmax
    
    def get_q(self):
        [dummy, qx, qz] = self.hxrd.Ang2Q(self.omega,self.ttheta, delta=[0.0, 0.0])
        
        #subtract centeral point from arrays by list comprehension
        qx[:] = [q - self.Q0x for q in qx]
        qz[:] = [q - self.Q0z for q in qz]
        
        return qx, qz
        
    def get_intensity(self):
        return self.intensity
        
    def set_cursor(self):
        # set useblit = True on gtkagg for enhanced performance
        self.cursor = Cursor(self.axes, useblit=True, color='black', linewidth=1 )
        #connect event handler on left button mouse click
        self.cidrelease = self.canvas.mpl_connect(
            'button_release_event', self.onLeftClick)
        
    def unset_cursor(self):
        if self.cursor:
            #unset cursor
            self.cursor = None
            #disconnect event handler on left button mouse click
            self.canvas.mpl_disconnect(self.cidrelease)
        
    def onLeftClick(self, event):
        self.unset_cursor()
        
        dlg = PeakFitDialog(self)
        #set position text controls equal to position of the mouse click
        dlg.SetPeakPosition(event.xdata, event.ydata)
        #set peak name
        dlg.SetPeakName("Peak 1")
        if dlg.ShowModal() == wx.ID_OK:
            print "Data fitting..."
# end of class MplPanel
