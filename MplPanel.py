# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Sun Apr 13 19:15:26 2014

import wx

from matplotlib import cm
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx

import xrayutilities as xu

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade


class MplPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # matplotlib figure
        self.figure = Figure()
        
        # begin wxGlade: MplPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.toolbar = NavigationToolbar2Wx(self.canvas)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        #needed to support Windows systems
        self.toolbar.Realize()
        # show toolbar
        self.toolbar.Show()
        
        #center of the map
        self.x0 = None
        self.y0 = None

    def __set_properties(self):
        # begin wxGlade: MplPanel.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MplPanel.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.canvas, 1, wx.ALL | wx.EXPAND, 0)
        sizer_2.Add(self.toolbar, 0, wx.BOTTOM | wx.EXPAND, 5)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        # end wxGlade
    
    def drawAngularMap(self, om, tt, psd):
        gridder = xu.Gridder2D(150,150)
        gridder(om, tt, psd)
        INT = xu.maplog(gridder.data.transpose(),6,0)

        #clear axes from previous drawing
        self.figure.clf()
        #add subplot to the figure
        self.axes = self.figure.add_subplot(111)
        #draw rsm
        cf = self.axes.contourf(gridder.xaxis, gridder.yaxis,INT,100,extend='min')
        #draw center
        self.axes.scatter(self.x0, self.y0, s = 100, marker = 'x', c = 'w')
        #annotate axes
        self.axes.set_xlabel(r'$\omega$ (deg)')
        self.axes.set_ylabel(r'$2\theta$ (deg)')
        # draw colorbar
        self.figure.colorbar(cf, ax = self.axes) 
        self.figure.canvas.draw()

    def drawReciprocalMap(self, om, tt, psd):
        Si = xu.materials.Si
        hxrd = xu.HXRD(Si.Q(1,1,0),Si.Q(0,0,1))
        [qx,qy,qz] = hxrd.Ang2Q(om,tt,delta=[0.0, 0.0])
        [q0x, q0y, q0z] = hxrd.Ang2Q(self.x0,self.y0,delta=[0.0, 0.0])
        
        gridder = xu.Gridder2D(100,100)
        gridder(qy,qz,psd)
        INT = xu.maplog(gridder.data.transpose(),6,0)
        
        #clear axes from previous drawing
        self.figure.clf()
        #add subplot to the figure
        self.axes = self.figure.add_subplot(111)
        #draw rsm
        cf = self.axes.contourf(gridder.xaxis, gridder.yaxis,INT,100,extend='min')
        #draw center
        self.axes.scatter(q0y, q0z, s = 100, marker = 'x', c = 'w')
        
        #annotate axis
        self.axes.set_xlabel(r'$Q_{[110]}$ ($\AA^{-1}$)')
        self.axes.set_ylabel(r'$Q_{[001]}$ ($\AA^{-1}$)')
        
        # draw colorbar
        self.figure.colorbar(cf, ax = self.axes) # draw colorbar
        self.figure.canvas.draw()

# end of class MplPanel
