# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Sun Apr 13 19:15:26 2014

import wx

import xrayutilities as xu

import os

# begin wxGlade: dependencies
from StgPanel import StgPanel
from MplPanel import MplPanel
# end wxGlade

# begin wxGlade: extracode

# end wxGlade


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        self.dirname = ""
        self.filename = ""

        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.MAXIMIZE | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.RESIZE_BORDER | wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.Open = wx.MenuItem(wxglade_tmp_menu, wx.ID_OPEN, "&Open", "Open a file to load", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Open)
        self.Save = wx.MenuItem(wxglade_tmp_menu, wx.ID_SAVE, "&Save", "Save data file", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Save)
        self.Exit = wx.MenuItem(wxglade_tmp_menu, wx.ID_EXIT, "E&xit", "Terminate the program", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Exit)
        self.menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        self.About = wx.MenuItem(wxglade_tmp_menu, wx.ID_ABOUT, "&About", "Information about this program", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.About)
        self.menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.menubar)
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(1, 0)
        self.mplPanel = MplPanel(self, wx.ID_ANY)
        self.stgPanel = StgPanel(self, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnOpen, self.Open)
        self.Bind(wx.EVT_MENU, self.OnSave, self.Save)
        self.Bind(wx.EVT_MENU, self.OnExit, self.Exit)
        self.Bind(wx.EVT_MENU, self.OnAbout, self.About)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("RSM Handler")
        self.statusbar.SetStatusWidths([-1])
        # statusbar fields
        statusbar_fields = ["frame_1_statusbar"]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.mplPanel, 1, wx.ALL | wx.EXPAND, 5)
        sizer_1.Add(self.stgPanel, 0, wx.ALL, 5)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def OnOpen(self, event):  # wxGlade: MainFrame.<event_handler>
        """Open a file"""
        dlg = wx.FileDialog(self, "Choose a file", "", "/home/dreamcatcher/Research/Como/XRD/9417/", "*.xrdml", wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.filename = dlg.GetFilename()
            self.dirname = dlg.GetDirectory()
            
            self.SetStatusText(self.filename)
            
            #read xrdml datafile
            om, tt, psd = xu.io.getxrdml_map(os.path.join(self.dirname + os.sep, self.filename))
            #setup mplPanel
            self.mplPanel.setup(om, tt, psd)
            #draw the angular map
            self.mplPanel.drawAngularMap()
            
            #enable mode selection ComboBox
            self.stgPanel.cbMode.Enable(True)
            
            #print central point in the corresponding TextControls
            self.stgPanel.tcX0.SetValue("%s" % self.mplPanel.x0)
            self.stgPanel.tcY0.SetValue("%s" % self.mplPanel.y0)
            
            #initial figure ranges are limits of axes
            self.stgPanel.xmin, self.stgPanel.xmax = self.mplPanel.figure.gca().get_xlim()
            self.stgPanel.ymin, self.stgPanel.ymax = self.mplPanel.figure.gca().get_ylim()

            #print figure ranges in the corresponding TextControls
            self.stgPanel.tcXMin.SetValue("%s" % self.stgPanel.xmin)
            self.stgPanel.tcXMax.SetValue("%s" % self.stgPanel.xmax)
            self.stgPanel.tcYMin.SetValue("%s" % self.stgPanel.ymin)
            self.stgPanel.tcYMax.SetValue("%s" % self.stgPanel.ymax)
            
        #destroy dialog
        dlg.Destroy()

    def OnExit(self, event):  # wxGlade: MainFrame.<event_handler>
        self.Close(True)

    def OnAbout(self, event):  # wxGlade: MainFrame.<event_handler>
        #Create a message dialog box
        dlg = wx.MessageDialog(self, "RSM Handler v0.43", "XRD", wx.OK)
        dlg.ShowModal()
        dlg.Destroy()

    def OnSave(self, event):  # wxGlade: MainFrame.<event_handler>
        dlg = wx.FileDialog(self, "Save QFit file", self.dirname, "",
                            "QFit files (*.qfit)|*.qfit", wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        if dlg.ShowModal() == wx.ID_OK:
            # save content in the file
            # this can be done with wxPython output streams:
            path = dlg.GetPath()
            print path
            self.saveFitDataFile(path)
        event.Skip()

    def saveFitDataFile(self, path):
        if self.filename:
            fout = open(path, "w")
            
            fout.write("#File created by RSM Handler from an experimental data\n")
            fout.write("#can be used for numerical fitting\n")
            fout.write("#[qx]\t[qz]\t[intensity]\n")
            
            Si = xu.materials.Si
            hxrd = xu.HXRD(Si.Q(1,1,0),Si.Q(0,0,1))
            [qx,qy,qz] = hxrd.Ang2Q(self.om,self.tt,delta=[0.0, 0.0])
            
            #TODO scale to substrate
            for i in range(len(self.psd)):
                fout.write('{0}\t{1}\t{2}\n'.format(qy[i], qz[i], self.psd[i]))
            
            fout.close()
        else:
            print "No experimental data"

    def saveGpltDataFile(self, path, mode):
        pass

# end of class MainFrame
